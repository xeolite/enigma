{"name":"x-enigma","tagline":"Fully configurable Enigma code machine, written in Java 8","body":"\r\n * M3 and M4 military variants implemented\r\n * Support for all machine settings\r\n * Support for creating custom rotors, reflectors and machines\r\n * Formatted output\r\n\r\n###Configuration\r\nAs an example we'll use the following codebook entry for the M3 machine:\r\n```\r\n------------------------------------------------------------------------------\r\n| Tag | UKW |   Walzenlage    | Ringstellung |      Steckerverbindungen      |\r\n------------------------------------------------------------------------------\r\n| 31  |  C  | VII   III  I    |   26 04 11   | BN DF EL HV JQ KW MZ PR SX UY |\r\n```\r\n\r\nThis tells us for the 31st day of the month, the settings are:\r\n\r\n * Reflector C\r\n * Rotors VII, III, I\r\n * Ring settings 26 (Z), 4 (D), 11 (K)\r\n * Plugboard connection pairs B=N, D=F etc.\r\n\r\nThe 'ring settings' are an offset of each rotor's wiring in relation to the rest of the rotor body\r\nand we can set them by number (they begin at 1) or letter (setting 1 is A).\r\nThe operators could then choose their own start positions for the rotors.\r\nLet's choose a start position for the three rotors with X, E and O facing upward in the machine.\r\nThe machine is then put together like this:\r\n\r\n```java\r\n    Enigma enigma = new EnigmaM3(\r\n            StandardReflector.C,\r\n            StandardRotor.VII.withSetting(26).startAt(Letter.X),\r\n            StandardRotor.III.withSetting(4).startAt(E),\r\n            StandardRotor.I.withSetting(11).startAt(O),\r\n            new Plugboard()\r\n                    .connect(B, N).connect(D, F).connect(E, L)\r\n                    .connect(H, V).connect(J, Q).connect(K, W)\r\n                    .connect(M, Z).connect(P, R).connect(S, X)\r\n                    .connect(U, Y));\r\n```\r\n\r\n\r\n###Encryption / decryption\r\n\r\nNow we're ready to encrypt a message. The encryption is case-insensitive and any non-alphabetic characters are ignored\r\nas Enigma only supports the characters A-Z.\r\n\r\n\r\n```java\r\nenigma.encipher(\r\n        \"If you want to keep a secret, you must also hide it from yourself.\",\r\n        OutputStyle.groupsOf(5).groupsPerLine(4));\r\n```\r\nWhich gives us\r\n```\r\nMQQWF AYPYF FYXWZ TJFIW\r\nUSLMX JHMDC FULVX TVBCG\r\nUTAXE AJPLU D\r\n```\r\n\r\nDecrypting the message requires it to be input to a machine in exactly the same starting state as the machine that encrypted it and then\r\n```java\r\nenigma.encipher(\"MQQWF AYPYF FYXWZ TJFIW USLMX JHMDC FULVX TVBCG UTAXE AJPLU D\");\r\n```\r\ngives us the alphabetic content of the original message\r\n```\r\nIFYOUWANTTOKEEPASECRETYOUMUSTALSOHIDEITFROMYOURSELF\r\n```\r\n\r\n\r\nThe M4 variant added a thin fourth rotor to the machine by combining this with a special thin reflector, so that it is configured like this:\r\n\r\n```java\r\n    Enigma enigma = new EnigmaM4(\r\n            ThinReflector.B_THIN,\r\n            ThinRotor.GAMMA.withSetting(Letter.X).startAt(Letter.S),\r\n            StandardRotor.I.withSetting(M).startAt(P),\r\n            StandardRotor.II.withSetting(J).startAt(D),\r\n            StandardRotor.III.withSetting(H).startAt(T),\r\n            new Plugboard()\r\n                    .connect(A, U).connect(F, O).connect(K, R)\r\n                    .connect(I, S).connect(D, P).connect(X, W));\r\n```\r\nEncryption and decryption are performed in the same way as for the M3.\r\n\r\n\r\n###Custom components\r\n\r\nCustom rotors and reflectors can be created. The cipher used by these components can be represented by a string of 26 letters,\r\nsuch that its first letter is the result of enciphering A, the second of enciphering B, etc., as commonly used in Enigma\r\ndescriptions.\r\n\r\nReflectors can be created in this way:\r\n```java\r\nStandardReflector A = new StandardReflector(\"EJMZALYXVBWFCRQUONTSPIKHGD\");\r\n```\r\n\r\nRotors are most easily defined by creating a reusable RotorConfiguration with the cipher alphabet and the turnover positions:\r\n```java\r\nRotorConfiguration<StandardRotor> X1 = new RotorConfiguration<>(\r\n        StandardRotor::new,\r\n        \"MIBPUYDQTXKWRFSCJAZEVHNOLG\",\r\n        Letter.M, Letter.B);\r\n\r\nStandardRotor left = X1.withSetting(Letter.D).startAt(Letter.R);\r\n```\r\n\r\nCustom machines can also be created, based on the mechanism of the military Enigma. Here's a two-rotor variant with no plugboard:\r\n```java\r\n    public class SmallEnigma extends Enigma {\r\n\r\n        public SmallEnigma(StandardReflector reflector,\r\n                            StandardRotor left,\r\n                            StandardRotor right) {\r\n\r\n            super(new EnigmaMechanism(reflector, new RotorGroup(left, right),\r\n                    new LeverGroup(2), Stator.MILITARY, new Plugboard()));\r\n        }\r\n\r\n    }\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}